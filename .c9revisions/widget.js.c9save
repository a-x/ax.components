{"ts":1359567718014,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\"use strict\";\r\n\r\nrequire(\"jquery\");\r\n\r\nvar $ = jQuery,\r\n\tutil = require(\"./util\");\r\n\r\n// Called on function.extend\r\nexports.Widget = util.extender({\r\n    // TODO: Widget.data function with redraw when data changed\r\n    // TODO: Proxy all function\r\n    // $(initElement)\r\n    initElement: \"<div>Widget</div>\"\r\n    // initialize\r\n    , initialize: function() { }\r\n    // signals description {\"click .btn\" : clicked}\r\n    //, TODO: signals: {} // if need\r\n    // events description {\"click .btn\" : clicked}\r\n    , events: {}\r\n    // default object\r\n    , defaults:{}\r\n    // render element \r\n    , render: function() {\r\n        return this;\r\n    }\r\n    // TODO: var listregexp = listregexp || [];\r\n    , dataChanged: function(e, data) {\r\n        //console.log(\"dataChanged\", data, this);\r\n        for (var key in data) {\r\n            data.hasOwnProperty(key) && this.triggerHandler(\"data:\" + key, [data[key]]); //FIXME:  this.data(key)\r\n        }\r\n        this.triggerHandler(\"data\", [data]);\r\n        //TODO: (_render === false) flag\r\n        \r\n        return false;\r\n    }\r\n    // return proxy function\r\n    , proxy: function(func) {\r\n        typeof(func) === \"string\" && ( func = this[func] );\r\n        return $.proxy(func, this);\r\n    }\r\n    // apply element with id to this.id\r\n    , applyNamesById: function() {\r\n        var self = this;\r\n        this.find('[id]').each(function(idx, element) {\r\n            var $el = $(element);\r\n            var id = $el.attr(\"id\");\r\n            self[id] = self[id] || $el;\r\n        })\r\n    }\r\n    // proxy to this all own functions\r\n    , applyProxy: function() {\r\n        for (var key in this) {\r\n            var func = this[key];\r\n            // proxy only own functions\r\n            if ( !( this.hasOwnProperty(key) && typeof(func) === \"function\" ) )\r\n                continue;\r\n\r\n            this[key] = $.proxy(func, this);\r\n        }\r\n    }\r\n    // process events map\r\n    , applyEvents: function() {\r\n        var events = this.events || {};\r\n        for (var key in events) {\r\n            if (!events.hasOwnProperty(key))\r\n                continue;\r\n            var func = events[key];\r\n            typeof(func) !== \"function\" && (func = this[func]);\r\n            typeof(func) !== \"function\" && console.log(\"error function: \", func);\r\n            var match = key.match( /^(\\S+)\\s*(.*)$/);\r\n            var event = match[1], selector = match[2];\r\n            selector ? this.on(event, selector, this.proxy(func)) : this.on(event, this.proxy(func))\r\n        }\r\n    }\r\n}, function(data, el) {\r\n    \r\n    // FIXME: fix when called as function\r\n    el = $(el || ((typeof(this.initElement) === \"function\") ? this.initElement() : this.initElement));\r\n\r\n    var ctor = function() {};\r\n    ctor.prototype = el;\r\n    var widget = new ctor();\r\n\r\n    el.data(\"widget\", widget);\r\n    $.extend(widget, this);\r\n\r\n    // extend data \r\n    data = $.extend({}, this.defaults, data || {});\r\n    widget.data(data);\r\n\r\n    // Some extra init\r\n    widget.applyNamesById();\r\n    // FIXME: widget.applyProxy();\r\n    widget.applyEvents();\r\n    widget.on(\"dataChanged\", widget.proxy(widget.dataChanged))\r\n    widget.on(\"data\", widget.proxy(widget.render));\r\n    \r\n    widget.initialize();\r\n    \r\n    widget.triggerHandler(\"dataChanged\", [widget.data()]);\r\n    return widget;\r\n});\r\n\r\n//----------------------------------------------------------------\r\n// FIXME: or fix jquery - $(elem)data(obj) trigger changeData event\r\n$.fn.data = (function() {\r\n    var $data = $.fn.data;\r\n    return function (key, value) {\r\n        var res = $data.apply(this, arguments);\r\n\r\n        // trigger only if set data\r\n        if ( !( !arguments.length || ( arguments.length === 1 && typeof(key) === \"string\" ) ) ) {\r\n            var data = {};\r\n            typeof(key) === \"string\" ? data[key] = value : data = key;\r\n            this.triggerHandler(\"dataChanged\", data);\r\n        }\r\n        return res;\r\n    };\r\n})();\r\n//----------------------------------------------------------------\r\n// apply element with id to this.id\r\n$.fn.widgets = function(func, data) {\r\n    return this.map(function(index, element) {\r\n        return $.data(element, \"widget\") || func(data || {}, element);\r\n    });\r\n};\r\n//----------------------------------------------------------------\r\n// apply element with id to this.id\r\n$.fn.widget = function(func, data) {\r\n    var $this = $(this);\r\n    return $this.data(\"widget\") || func && (func || Widget)(data || {}, $this);\r\n};\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":4453}]],"length":4453}
